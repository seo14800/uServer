// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: Enum.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Enum_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Enum_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Enum_2eproto;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Protocol {
enum ObjectType : int {
  OBJECT_TYPE_NONE = 0,
  OBJECT_TYPE_CREATURE = 1,
  OBJECT_TYPE_PROJECTILE = 2,
  OBJECT_TYPE_ENV = 3,
  ObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ObjectType_IsValid(int value);
extern const uint32_t ObjectType_internal_data_[];
constexpr ObjectType ObjectType_MIN = static_cast<ObjectType>(0);
constexpr ObjectType ObjectType_MAX = static_cast<ObjectType>(3);
constexpr int ObjectType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
ObjectType_descriptor();
template <typename T>
const std::string& ObjectType_Name(T value) {
  static_assert(std::is_same<T, ObjectType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ObjectType_Name().");
  return ObjectType_Name(static_cast<ObjectType>(value));
}
template <>
inline const std::string& ObjectType_Name(ObjectType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ObjectType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ObjectType_Parse(absl::string_view name, ObjectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjectType>(
      ObjectType_descriptor(), name, value);
}
enum CreatureType : int {
  CREATURE_TYPE_NONE = 0,
  CREATURE_TYPE_PLAYER = 1,
  CREATURE_TYPE_MONSTER = 2,
  CREATURE_TYPE_NPC = 3,
  CreatureType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CreatureType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CreatureType_IsValid(int value);
extern const uint32_t CreatureType_internal_data_[];
constexpr CreatureType CreatureType_MIN = static_cast<CreatureType>(0);
constexpr CreatureType CreatureType_MAX = static_cast<CreatureType>(3);
constexpr int CreatureType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
CreatureType_descriptor();
template <typename T>
const std::string& CreatureType_Name(T value) {
  static_assert(std::is_same<T, CreatureType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CreatureType_Name().");
  return CreatureType_Name(static_cast<CreatureType>(value));
}
template <>
inline const std::string& CreatureType_Name(CreatureType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CreatureType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool CreatureType_Parse(absl::string_view name, CreatureType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CreatureType>(
      CreatureType_descriptor(), name, value);
}
enum PlayerType : int {
  PLAYER_TYPE_NONE = 0,
  PLAYER_TYPE_KNIGHT = 1,
  PLAYER_TYPE_MAGE = 2,
  PLAYER_TYPE_ARCHER = 3,
  PlayerType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PlayerType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PlayerType_IsValid(int value);
extern const uint32_t PlayerType_internal_data_[];
constexpr PlayerType PlayerType_MIN = static_cast<PlayerType>(0);
constexpr PlayerType PlayerType_MAX = static_cast<PlayerType>(3);
constexpr int PlayerType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
PlayerType_descriptor();
template <typename T>
const std::string& PlayerType_Name(T value) {
  static_assert(std::is_same<T, PlayerType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PlayerType_Name().");
  return PlayerType_Name(static_cast<PlayerType>(value));
}
template <>
inline const std::string& PlayerType_Name(PlayerType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PlayerType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool PlayerType_Parse(absl::string_view name, PlayerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerType>(
      PlayerType_descriptor(), name, value);
}
enum MoveState : int {
  MOVE_STATE_NONE = 0,
  MOVE_STATE_IDLE = 1,
  MOVE_STATE_RUN = 2,
  MOVE_STATE_JUMP = 3,
  MOVE_STATE_SKILL = 4,
  MoveState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MoveState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MoveState_IsValid(int value);
extern const uint32_t MoveState_internal_data_[];
constexpr MoveState MoveState_MIN = static_cast<MoveState>(0);
constexpr MoveState MoveState_MAX = static_cast<MoveState>(4);
constexpr int MoveState_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
MoveState_descriptor();
template <typename T>
const std::string& MoveState_Name(T value) {
  static_assert(std::is_same<T, MoveState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MoveState_Name().");
  return MoveState_Name(static_cast<MoveState>(value));
}
template <>
inline const std::string& MoveState_Name(MoveState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MoveState_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool MoveState_Parse(absl::string_view name, MoveState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MoveState>(
      MoveState_descriptor(), name, value);
}

// ===================================================================



// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Protocol::ObjectType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Protocol::ObjectType>() {
  return ::Protocol::ObjectType_descriptor();
}
template <>
struct is_proto_enum<::Protocol::CreatureType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Protocol::CreatureType>() {
  return ::Protocol::CreatureType_descriptor();
}
template <>
struct is_proto_enum<::Protocol::PlayerType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Protocol::PlayerType>() {
  return ::Protocol::PlayerType_descriptor();
}
template <>
struct is_proto_enum<::Protocol::MoveState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Protocol::MoveState>() {
  return ::Protocol::MoveState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto_2epb_2eh
